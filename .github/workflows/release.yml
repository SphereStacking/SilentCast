name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pages: write
  id-token: write

env:
  GO_VERSION: '1.21'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: app/go.sum
    
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}

  build-with-cgo:
    name: Build with CGO
    needs: release
    strategy:
      matrix:
        include:
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: app/go.sum
    
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew list pkg-config || brew install pkg-config
    
    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        cd app
        go build -ldflags "-X main.Version=${GITHUB_REF#refs/tags/v} -s -w" -o ../silentcast-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/silentcast
    
    - name: Upload to release
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: |
          silentcast-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  update-docs:
    name: Update Documentation Version
    needs: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main
    
    - name: Extract version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update VitePress config
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        sed -i "s/text: 'v[0-9.]*'/text: 'v$VERSION'/" docs/.vitepress/config.mts
        
        # Update package.json version
        cd docs
        npm version $VERSION --no-git-tag-version || true
    
    - name: Commit version updates
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add -A
          git commit -m "chore: update documentation version to ${{ steps.version.outputs.VERSION }}"
          git push
        fi