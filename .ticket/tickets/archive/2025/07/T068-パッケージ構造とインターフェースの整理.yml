id: T068
title: "パッケージ構造とインターフェースの整理"
type: refactor
priority: medium
status: completed
created: "2025-07-19"
updated: "2025-07-20"
assignee: null
labels:
  - refactor
  - architecture
  - design

description: |
  ## 概要
  プロジェクトのパッケージ構造を見直し、インターフェースの設計を改善して、より保守性の高いアーキテクチャを実現する。
  
  ## 改善点
  - パッケージ間の依存関係の整理
  - インターフェースの適切な定義と配置
  - 循環依存の解消
  - 責任の明確な分離
  
tasks:
  - [ ] 現在のパッケージ依存関係の可視化
  - [ ] 循環依存の特定と解消
  - [ ] actionパッケージのフォルダ構造見直し
  - [ ] プラットフォーム固有ファイル（_darwin.go等）の整理最適化
  - [ ] インターフェースの見直しと再設計
  - [ ] パッケージの責任範囲の明確化
  - [ ] 共通インターフェースの抽出
  - [ ] internal/pkg の適切な使い分け
  - [ ] ファクトリーパターンの導入検討
  - [ ] DIコンテナの導入検討
  - [ ] パッケージドキュメントの作成
  - [ ] アーキテクチャ決定記録（ADR）の作成
  
acceptance_criteria:
  - 循環依存が0件
  - 各パッケージの責任が明確
  - インターフェースが適切に定義されている
  - パッケージ依存グラフの文書化
  - ADRの作成完了

dependencies: [T064, T065]  # 親チケット：プロジェクト全体の監査とリファクタリング

related: [T064]

files:
  - app/internal/**/*.go
  - app/pkg/**/*.go
  - docs/architecture/**/*.md
  - go.mod

time_estimate: 10h
time_spent: 0h

notes: |
  ## 重点パッケージ
  - action: 実行系の整理
  - config: 設定管理の統一
  - notify: 通知システムの抽象化
  - service: サービス管理の統一
  
  ## フォルダ構造の検討事項
  
  ### 現在のactionパッケージ構造
  ```
  action/
  ├── app.go               # アプリ起動
  ├── launcher*.go         # プラットフォーム固有ランチャー
  ├── script*.go           # スクリプト実行
  ├── shell*.go            # シェル実行（重複）
  ├── elevated.go          # 管理者権限実行
  ├── url.go               # URL起動
  ├── browser/             # ブラウザ関連（サブディレクトリ）
  └── shell/               # シェル関連（サブディレクトリ）
  ```
  
  ### 構造改善の選択肢
  
  #### 案A: サブディレクトリ統一
  ```
  action/
  ├── executor.go          # メインExecutorインターフェース
  ├── app/                # アプリケーション起動
  ├── script/             # スクリプト実行
  ├── shell/              # シェル実行（統合）
  ├── browser/            # ブラウザ起動（既存）
  ├── elevated/           # 管理者権限実行
  └── url/                # URL起動
  ```
  
  #### 案B: 機能別パッケージ
  ```
  internal/
  ├── executor/           # 実行エンジン
  │   ├── app/
  │   ├── script/
  │   └── shell/
  ├── launcher/           # 起動系
  │   ├── browser/
  │   └── url/
  └── platform/           # プラットフォーム固有
      ├── darwin/
      ├── linux/
      └── windows/
  ```
  
  #### 案C: 現状維持＋整理
  ```
  action/
  ├── *.go                # 既存ファイル整理
  ├── browser/            # 既存維持
  └── shell/              # 重複ファイル統合
  ```
  
  ### 実装時の調査項目
  - 現在の依存関係とインポート状況
  - プラットフォーム固有ファイルの重複度
  - テストファイルの配置と実行速度への影響
  - パッケージ名の衝突チェック
  - Goの慣例（名前_プラットフォーム.go）との整合性
  - ビルド時間とコンパイル速度への影響
  
  ## 設計原則
  - SOLID原則の適用
  - Clean Architectureの概念
  - 依存性逆転の原則
  - Goらしいシンプルな構造