# T059: Add E2E tests for major workflows

id: T059
title: "主要ワークフロー用E2Eテストの追加"
type: test
priority: medium
status: completed
created: "2025-07-18"
updated: "2025-07-20"
assignee: null
labels: ["test", "e2e", "workflow", "automation"]

description: |
  SilentCastの完全なユーザーワークフローを検証するエンドツーエンドテストを
  作成します。これらのテストは、ユーザー入力から最終出力まで、アプリケーション
  スタック全体が正しく動作することを保証し、実世界の使用シナリオをテストします。

  E2Eテストは、ホットキープレス、設定変更、システム応答などの実際のユーザー
  インタラクションをシミュレートし、アプリケーションが本番環境で意図した通りに
  動作することへの信頼を提供します。
  
tasks:
  - [ ] 自動化ツールでE2Eテストフレームワークをセットアップ
  - [ ] アプリケーション起動と初期化ワークフローテストを作成
  - [ ] 設定ローディングとファイル監視シナリオをテスト
  - [ ] ホットキーシーケンス検出とアクション実行テストを実装
  - [ ] アプリケーション起動ワークフローテストを作成（VS Code、ブラウザーなど）
  - [ ] 様々なシェルでのスクリプト実行ワークフローをテスト
  - [ ] プラットフォーム間でのURL開くワークフローを検証
  - [ ] 昇格アクション実行とパーミッション処理をテスト
  - [ ] システムトレイインタラクションテストを作成
  - [ ] 通知表示とユーザーフィードバックワークフローをテスト
  - [ ] エラー復旧と回復力シナリオを実装
  - [ ] パフォーマンスとストレステストシナリオを作成
  - [ ] 適切な分離でE2EテストCI/CDパイプラインをセットアップ
  - [ ] E2Eテスト手順とガイドラインを文書化
  
acceptance_criteria:
  - E2Eテストがすべての主要ユーザーワークフローとユースケースをカバー
  - テストが適切な分離でCI/CD環境で信頼性を持って実行可能
  - テストシナリオに成功と失敗の両方のパスが含まれている
  - パフォーマンスベンチマークが確立され監視されている
  - テストが明確な失敗診断とデバッグ情報を提供
  - E2Eテストがユニットテストと統合テストを重複せずに補完

dependencies: []  # List of ticket IDs this depends on

related: ["T057", "T058"]  # Unit and integration tests

files: 
  - "test/e2e/"
  - "test/e2e/startup_test.go"
  - "test/e2e/config_test.go"
  - "test/e2e/hotkey_workflow_test.go"
  - "test/e2e/app_launch_test.go"
  - "test/e2e/script_execution_test.go"
  - "test/e2e/url_opening_test.go"
  - "test/e2e/permission_test.go"
  - "test/e2e/tray_test.go"
  - "test/e2e/notification_test.go"
  - "test/e2e/error_recovery_test.go"
  - "test/e2e/performance_test.go"
  - "test/fixtures/configs/"
  - "test/fixtures/scripts/"
  - ".github/workflows/e2e.yml"
  - "docker/test-environment/"

time_estimate: 12h
time_spent: 0h

notes: |
  E2Eテスト戦略：
  - スタブバージョンではなく実際のアプリケーションバイナリを使用
  - 分離された環境（コンテナ/VM）でテスト
  - 実際のユーザーインタラクションとシステム応答をシミュレート
  - 該当する場合はクロスプラットフォームシナリオを含める
  - GUIとヘッドレスモードの両方をテスト
  
  主要なE2Eワークフロー：
  1. アプリケーションライフサイクル：
     - 起動 → 設定ローディング → ホットキー登録 → 準備状態
     - グレースフルシャットダウンとクリーンアップ
     - エラー復旧と再起動シナリオ
  
  2. コアユーザーワークフロー：
     - スペルブック設定 → ホットキー登録 → アクション実行
     - 設定変更 → 自動再読み込み → 更新された動作
     - パーミッションリクエスト処理 → 特権アクション実行
  
  3. アクション実行ワークフロー：
     - アプリ起動: VS Code、ブラウザー、システムアプリ
     - スクリプト実行: シェルコマンド、Pythonスクリプト、バッチファイル
     - URL開く: ウェブページ、ローカルファイル、プロトコルハンドラー
     - システム統合: クリップボード、ファイル操作
  
  テストツールと環境：
  - 分離されたテスト環境にはDockerを使用
  - 自動化にはRobot Frameworkまたは同様のツールを使用
  - GUIテストには仮想ディスプレイを使用
  - 必要に応じて外部依存関係をモック
  - 効率性のための並列テスト実行
  
  プラットフォームの考慮事項：
  - Windows: 異なるWindowsバージョンでテスト
  - macOS: パーミッションダイアログとセキュリティを処理
  - Linux: 異なるデスクトップ環境でテスト