# T058: Create integration test suite

id: T058
title: "統合テストスイートの作成"
type: test
priority: medium
status: completed
created: "2025-07-18"
updated: "2025-07-19"
assignee: null
labels: ["test", "integration", "cross-package"]

description: |
  SilentCastの異なるコンポーネント間の相互作用を検証する包括的な統合テストを
  作成します。これらのテストは、すべての部品が組み合わされたときにシステムが
  正しく動作することを保証し、実世界のシナリオとパッケージ間機能に焦点を当てます。

  統合テストは、ユニットテスト（個別コンポーネント）とE2Eテスト（完全なユーザー
  ワークフロー）の間のギャップを埋め、完全なアプリケーションスタックを必要とせずに
  コンポーネント間の相互作用をテストします。
  
tasks:
  - [ ] 統合テストフレームワークと構造をセットアップ
  - [ ] 設定ローディング統合テストを作成（ファイル監視、カスケードローディング）
  - [ ] ホットキーマネージャー + アクションエグゼキューター統合をテスト
  - [ ] パーミッションマネージャー + アクション実行ワークフローを検証
  - [ ] 通知システム + アクションフィードバック統合をテスト
  - [ ] 出力フォーマッター + バッファリング出力統合テストを作成
  - [ ] 設定検証 + エラー報告統合をテスト
  - [ ] トレイ + ホットキーマネージャー + 通知統合を検証
  - [ ] クロスプラットフォーム互換性シナリオをテスト
  - [ ] テストフィクスチャとモック環境を作成
  - [ ] 統合テストCI/CDパイプラインステージを追加
  - [ ] 統合テストガイドラインを文書化
  
acceptance_criteria:
  - 統合テストスイートがすべての主要コンポーネント相互作用をカバー
  - テストが外部依存関係なしで分離された環境で実行可能
  - すべてのクロスプラットフォームシナリオが適切なモックでカバーされている
  - 統合テストがCI/CDに十分高速（合計2分未満）
  - テスト失敗時に明確なデバッグ情報を提供
  - 統合テストがユニットテストと重複せずに補完している

dependencies: []  # List of ticket IDs this depends on

related: ["T057", "T059"]  # Unit tests and E2E tests

files: 
  - "app/test/integration/"
  - "app/test/integration/config_test.go"
  - "app/test/integration/hotkey_action_test.go"
  - "app/test/integration/permission_test.go"
  - "app/test/integration/notification_test.go"
  - "app/test/integration/output_test.go"
  - "app/test/integration/tray_test.go"
  - "app/test/fixtures/"
  - "app/test/mocks/"
  - ".github/workflows/integration.yml"
  - "Makefile"

time_estimate: 10h
time_spent: 0h

notes: |
  統合テスト戦略：
  - コンポーネント境界とデータフローに焦点を当てる
  - 可能な限り実装を使用し、外部依存関係にはモックを使用
  - 設定カスケードと環境固有の動作をテスト
  - エラー伝播と復旧シナリオを検証
  - リソースクリーンアップとライフサイクル管理をテスト
  
  主要な統合シナリオ：
  1. 設定ローディングフロー：
     - ファイル監視 → 設定再読み込み → アクション更新
     - プラットフォーム固有オーバーライドを含むカスケードローディング
     - 検証エラー処理とユーザーフィードバック
  
  2. ホットキーアクションフロー：
     - キー検出 → 解析 → アクション検索 → 実行
     - エラー処理とユーザー通知
     - パーミッションチェックと昇格リクエスト
  
  3. クロスプラットフォームシナリオ：
     - プラットフォーム固有アクション実行
     - OSパーミッション処理
     - 通知システムのバリエーション
  
  テストツール：
  - アサーションとテストスイートにはtestifyを使用
  - 共有テストユーティリティとフィクスチャを作成
  - 外部依存関係をモック化（ファイルシステム、OS API）
  - ファイル操作には一時ディレクトリを使用